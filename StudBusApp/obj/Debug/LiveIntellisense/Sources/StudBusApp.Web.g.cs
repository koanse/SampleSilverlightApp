//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudBusApp
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using StudBusApp.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace StudBusApp.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using StudBusApp.Web.Resources;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("StudBusApp-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'StudDomainService' domain service.
    /// </summary>
    public sealed partial class StudDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StudDomainContext"/> class.
        /// </summary>
        public StudDomainContext() : 
                this(new WebDomainClient<IStudDomainServiceContract>(new Uri("StudBusApp-Web-StudDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StudDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The StudDomainService service URI.</param>
        public StudDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IStudDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StudDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public StudDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Группа"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<Группа> Группаs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Группа>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Дисциплина"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<Дисциплина> Дисциплинаs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Дисциплина>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Оценка"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<Оценка> Оценкаs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Оценка>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ОценкаПодробно"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<ОценкаПодробно> ОценкаПодробноs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ОценкаПодробно>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Студент"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<Студент> Студентs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Студент>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="СтудентГруппа"/> entities that have been loaded into this <see cref="StudDomainContext"/> instance.
        /// </summary>
        public EntitySet<СтудентГруппа> СтудентГруппаs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<СтудентГруппа>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Группа"/> entities using the 'GetГруппа' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Группа"/> entities.</returns>
        public EntityQuery<Группа> GetГруппаQuery()
        {
            this.ValidateMethod("GetГруппаQuery", null);
            return base.CreateQuery<Группа>("GetГруппа", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Дисциплина"/> entities using the 'GetДисциплина' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Дисциплина"/> entities.</returns>
        public EntityQuery<Дисциплина> GetДисциплинаQuery()
        {
            this.ValidateMethod("GetДисциплинаQuery", null);
            return base.CreateQuery<Дисциплина>("GetДисциплина", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Оценка"/> entities using the 'GetОценка' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Оценка"/> entities.</returns>
        public EntityQuery<Оценка> GetОценкаQuery()
        {
            this.ValidateMethod("GetОценкаQuery", null);
            return base.CreateQuery<Оценка>("GetОценка", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Оценка"/> entities using the 'GetОценкаByГруппаДисциплина' query.
        /// </summary>
        /// <param name="КодДисциплины">The value for the 'КодДисциплины' parameter of the query.</param>
        /// <param name="КодГруппы">The value for the 'КодГруппы' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Оценка"/> entities.</returns>
        public EntityQuery<Оценка> GetОценкаByГруппаДисциплинаQuery(int КодДисциплины, int КодГруппы)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("КодДисциплины", КодДисциплины);
            parameters.Add("КодГруппы", КодГруппы);
            this.ValidateMethod("GetОценкаByГруппаДисциплинаQuery", parameters);
            return base.CreateQuery<Оценка>("GetОценкаByГруппаДисциплина", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ОценкаПодробно"/> entities using the 'GetОценкаПодробноByГруппаДисциплина' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ОценкаПодробно"/> entities.</returns>
        public EntityQuery<ОценкаПодробно> GetОценкаПодробноByГруппаДисциплинаQuery()
        {
            this.ValidateMethod("GetОценкаПодробноByГруппаДисциплинаQuery", null);
            return base.CreateQuery<ОценкаПодробно>("GetОценкаПодробноByГруппаДисциплина", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Студент"/> entities using the 'GetСтудент' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Студент"/> entities.</returns>
        public EntityQuery<Студент> GetСтудентQuery()
        {
            this.ValidateMethod("GetСтудентQuery", null);
            return base.CreateQuery<Студент>("GetСтудент", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="СтудентГруппа"/> entities using the 'GetСтудентГруппа' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="СтудентГруппа"/> entities.</returns>
        public EntityQuery<СтудентГруппа> GetСтудентГруппаQuery()
        {
            this.ValidateMethod("GetСтудентГруппаQuery", null);
            return base.CreateQuery<СтудентГруппа>("GetСтудентГруппа", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new StudDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'StudDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IStudDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetГруппа' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetГруппаDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetГруппа", ReplyAction="http://tempuri.org/StudDomainService/GetГруппаResponse")]
            [WebGet()]
            IAsyncResult BeginGetГруппа(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetГруппа'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetГруппа'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetГруппа' operation.</returns>
            QueryResult<Группа> EndGetГруппа(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetДисциплина' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetДисциплинаDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetДисциплина", ReplyAction="http://tempuri.org/StudDomainService/GetДисциплинаResponse")]
            [WebGet()]
            IAsyncResult BeginGetДисциплина(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetДисциплина'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetДисциплина'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetДисциплина' operation.</returns>
            QueryResult<Дисциплина> EndGetДисциплина(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetОценка' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetОценкаDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetОценка", ReplyAction="http://tempuri.org/StudDomainService/GetОценкаResponse")]
            [WebGet()]
            IAsyncResult BeginGetОценка(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetОценка'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetОценка'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetОценка' operation.</returns>
            QueryResult<Оценка> EndGetОценка(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetОценкаByГруппаДисциплина' operation.
            /// </summary>
            /// <param name="КодДисциплины">The value for the 'КодДисциплины' parameter of this action.</param>
            /// <param name="КодГруппы">The value for the 'КодГруппы' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetОценкаByГруппаДисциплинаDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetОценкаByГруппаДисциплина", ReplyAction="http://tempuri.org/StudDomainService/GetОценкаByГруппаДисциплинаResponse")]
            [WebGet()]
            IAsyncResult BeginGetОценкаByГруппаДисциплина(int КодДисциплины, int КодГруппы, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetОценкаByГруппаДисциплина'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetОценкаByГруппаДисциплина'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetОценкаByГруппаДисциплина' operation.</returns>
            QueryResult<Оценка> EndGetОценкаByГруппаДисциплина(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetОценкаПодробноByГруппаДисциплина' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetОценкаПодробноByГруппаДисциплинаDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetОценкаПодробноByГруппаДисциплина", ReplyAction="http://tempuri.org/StudDomainService/GetОценкаПодробноByГруппаДисциплинаResponse")]
            [WebGet()]
            IAsyncResult BeginGetОценкаПодробноByГруппаДисциплина(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetОценкаПодробноByГруппаДисциплина'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetОценкаПодробноByГруппаДисциплина'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetОценкаПодробноByГруппаДисциплина' operation.</returns>
            QueryResult<ОценкаПодробно> EndGetОценкаПодробноByГруппаДисциплина(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetСтудент' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetСтудентDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetСтудент", ReplyAction="http://tempuri.org/StudDomainService/GetСтудентResponse")]
            [WebGet()]
            IAsyncResult BeginGetСтудент(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetСтудент'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetСтудент'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetСтудент' operation.</returns>
            QueryResult<Студент> EndGetСтудент(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetСтудентГруппа' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/GetСтудентГруппаDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/GetСтудентГруппа", ReplyAction="http://tempuri.org/StudDomainService/GetСтудентГруппаResponse")]
            [WebGet()]
            IAsyncResult BeginGetСтудентГруппа(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetСтудентГруппа'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetСтудентГруппа'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetСтудентГруппа' operation.</returns>
            QueryResult<СтудентГруппа> EndGetСтудентГруппа(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StudDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StudDomainService/SubmitChanges", ReplyAction="http://tempuri.org/StudDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class StudDomainContextEntityContainer : EntityContainer
        {
            
            public StudDomainContextEntityContainer()
            {
                this.CreateEntitySet<Группа>(EntitySetOperations.All);
                this.CreateEntitySet<Дисциплина>(EntitySetOperations.All);
                this.CreateEntitySet<Оценка>(EntitySetOperations.All);
                this.CreateEntitySet<ОценкаПодробно>(EntitySetOperations.All);
                this.CreateEntitySet<Студент>(EntitySetOperations.All);
                this.CreateEntitySet<СтудентГруппа>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("StudBusApp-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'Группа' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class Группа : Entity
    {
        
        private int _код;
        
        private string _наименование;
        
        private EntityCollection<Студент> _студент;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnКодChanging(int value);
        partial void OnКодChanged();
        partial void OnНаименованиеChanging(string value);
        partial void OnНаименованиеChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Группа"/> class.
        /// </summary>
        public Группа()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Код' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Код
        {
            get
            {
                return this._код;
            }
            set
            {
                if ((this._код != value))
                {
                    this.OnКодChanging(value);
                    this.ValidateProperty("Код", value);
                    this._код = value;
                    this.RaisePropertyChanged("Код");
                    this.OnКодChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Наименование' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Наименование
        {
            get
            {
                return this._наименование;
            }
            set
            {
                if ((this._наименование != value))
                {
                    this.OnНаименованиеChanging(value);
                    this.RaiseDataMemberChanging("Наименование");
                    this.ValidateProperty("Наименование", value);
                    this._наименование = value;
                    this.RaiseDataMemberChanged("Наименование");
                    this.OnНаименованиеChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Студент"/> entities.
        /// </summary>
        [Association("Группа_Студент", "Код", "КодГруппы")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<Студент> Студент
        {
            get
            {
                if ((this._студент == null))
                {
                    this._студент = new EntityCollection<Студент>(this, "Студент", this.FilterСтудент, this.AttachСтудент, this.DetachСтудент);
                }
                return this._студент;
            }
        }
        
        private void AttachСтудент(Студент entity)
        {
            entity.Группа = this;
        }
        
        private void DetachСтудент(Студент entity)
        {
            entity.Группа = null;
        }
        
        private bool FilterСтудент(Студент entity)
        {
            return (entity.КодГруппы == this.Код);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._код;
        }
    }
    
    /// <summary>
    /// The 'Дисциплина' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class Дисциплина : Entity
    {
        
        private int _код;
        
        private string _наименование;
        
        private EntityCollection<Оценка> _оценка;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnКодChanging(int value);
        partial void OnКодChanged();
        partial void OnНаименованиеChanging(string value);
        partial void OnНаименованиеChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Дисциплина"/> class.
        /// </summary>
        public Дисциплина()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Код' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Код
        {
            get
            {
                return this._код;
            }
            set
            {
                if ((this._код != value))
                {
                    this.OnКодChanging(value);
                    this.ValidateProperty("Код", value);
                    this._код = value;
                    this.RaisePropertyChanged("Код");
                    this.OnКодChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Наименование' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string Наименование
        {
            get
            {
                return this._наименование;
            }
            set
            {
                if ((this._наименование != value))
                {
                    this.OnНаименованиеChanging(value);
                    this.RaiseDataMemberChanging("Наименование");
                    this.ValidateProperty("Наименование", value);
                    this._наименование = value;
                    this.RaiseDataMemberChanged("Наименование");
                    this.OnНаименованиеChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Оценка"/> entities.
        /// </summary>
        [Association("Дисциплина_Оценка", "Код", "КодДисциплины")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<Оценка> Оценка
        {
            get
            {
                if ((this._оценка == null))
                {
                    this._оценка = new EntityCollection<Оценка>(this, "Оценка", this.FilterОценка, this.AttachОценка, this.DetachОценка);
                }
                return this._оценка;
            }
        }
        
        private void AttachОценка(Оценка entity)
        {
            entity.Дисциплина = this;
        }
        
        private void DetachОценка(Оценка entity)
        {
            entity.Дисциплина = null;
        }
        
        private bool FilterОценка(Оценка entity)
        {
            return (entity.КодДисциплины == this.Код);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._код;
        }
    }
    
    /// <summary>
    /// The 'Оценка' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class Оценка : Entity
    {
        
        private EntityRef<Дисциплина> _дисциплина;
        
        private int _кодДисциплины;
        
        private int _кодСтудента;
        
        private int _оценка1;
        
        private EntityRef<Студент> _студент;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnКодДисциплиныChanging(int value);
        partial void OnКодДисциплиныChanged();
        partial void OnКодСтудентаChanging(int value);
        partial void OnКодСтудентаChanged();
        partial void OnОценка1Changing(int value);
        partial void OnОценка1Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Оценка"/> class.
        /// </summary>
        public Оценка()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Дисциплина"/> entity.
        /// </summary>
        [Association("Дисциплина_Оценка", "КодДисциплины", "Код", IsForeignKey=true)]
        [XmlIgnore()]
        public Дисциплина Дисциплина
        {
            get
            {
                if ((this._дисциплина == null))
                {
                    this._дисциплина = new EntityRef<Дисциплина>(this, "Дисциплина", this.FilterДисциплина);
                }
                return this._дисциплина.Entity;
            }
            set
            {
                Дисциплина previous = this.Дисциплина;
                if ((previous != value))
                {
                    this.ValidateProperty("Дисциплина", value);
                    if ((previous != null))
                    {
                        this._дисциплина.Entity = null;
                        previous.Оценка.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.КодДисциплины = value.Код;
                    }
                    else
                    {
                        this.КодДисциплины = default(int);
                    }
                    this._дисциплина.Entity = value;
                    if ((value != null))
                    {
                        value.Оценка.Add(this);
                    }
                    this.RaisePropertyChanged("Дисциплина");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодДисциплины' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int КодДисциплины
        {
            get
            {
                return this._кодДисциплины;
            }
            set
            {
                if ((this._кодДисциплины != value))
                {
                    this.OnКодДисциплиныChanging(value);
                    this.RaiseDataMemberChanging("КодДисциплины");
                    this.ValidateProperty("КодДисциплины", value);
                    this._кодДисциплины = value;
                    this.RaiseDataMemberChanged("КодДисциплины");
                    this.OnКодДисциплиныChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодСтудента' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int КодСтудента
        {
            get
            {
                return this._кодСтудента;
            }
            set
            {
                if ((this._кодСтудента != value))
                {
                    this.OnКодСтудентаChanging(value);
                    this.RaiseDataMemberChanging("КодСтудента");
                    this.ValidateProperty("КодСтудента", value);
                    this._кодСтудента = value;
                    this.RaiseDataMemberChanged("КодСтудента");
                    this.OnКодСтудентаChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Оценка1' value.
        /// </summary>
        [DataMember()]
        public int Оценка1
        {
            get
            {
                return this._оценка1;
            }
            set
            {
                if ((this._оценка1 != value))
                {
                    this.OnОценка1Changing(value);
                    this.RaiseDataMemberChanging("Оценка1");
                    this.ValidateProperty("Оценка1", value);
                    this._оценка1 = value;
                    this.RaiseDataMemberChanged("Оценка1");
                    this.OnОценка1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Студент"/> entity.
        /// </summary>
        [Association("Студент_Оценка", "КодСтудента", "Код", IsForeignKey=true)]
        [XmlIgnore()]
        public Студент Студент
        {
            get
            {
                if ((this._студент == null))
                {
                    this._студент = new EntityRef<Студент>(this, "Студент", this.FilterСтудент);
                }
                return this._студент.Entity;
            }
            set
            {
                Студент previous = this.Студент;
                if ((previous != value))
                {
                    this.ValidateProperty("Студент", value);
                    if ((previous != null))
                    {
                        this._студент.Entity = null;
                        previous.Оценка.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.КодСтудента = value.Код;
                    }
                    else
                    {
                        this.КодСтудента = default(int);
                    }
                    this._студент.Entity = value;
                    if ((value != null))
                    {
                        value.Оценка.Add(this);
                    }
                    this.RaisePropertyChanged("Студент");
                }
            }
        }
        
        private bool FilterДисциплина(Дисциплина entity)
        {
            return (entity.Код == this.КодДисциплины);
        }
        
        private bool FilterСтудент(Студент entity)
        {
            return (entity.Код == this.КодСтудента);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._кодДисциплины, this._кодСтудента);
        }
    }
    
    /// <summary>
    /// The 'ОценкаПодробно' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class ОценкаПодробно : Entity
    {
        
        private string _группа;
        
        private string _дисциплина;
        
        private Nullable<int> _кодГруппы;
        
        private int _кодДисциплины;
        
        private int _кодСтудента;
        
        private int _оценка;
        
        private string _фио;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnГруппаChanging(string value);
        partial void OnГруппаChanged();
        partial void OnДисциплинаChanging(string value);
        partial void OnДисциплинаChanged();
        partial void OnКодГруппыChanging(Nullable<int> value);
        partial void OnКодГруппыChanged();
        partial void OnКодДисциплиныChanging(int value);
        partial void OnКодДисциплиныChanged();
        partial void OnКодСтудентаChanging(int value);
        partial void OnКодСтудентаChanged();
        partial void OnОценкаChanging(int value);
        partial void OnОценкаChanged();
        partial void OnФИОChanging(string value);
        partial void OnФИОChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ОценкаПодробно"/> class.
        /// </summary>
        public ОценкаПодробно()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Группа' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Группа
        {
            get
            {
                return this._группа;
            }
            set
            {
                if ((this._группа != value))
                {
                    this.OnГруппаChanging(value);
                    this.RaiseDataMemberChanging("Группа");
                    this.ValidateProperty("Группа", value);
                    this._группа = value;
                    this.RaiseDataMemberChanged("Группа");
                    this.OnГруппаChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Дисциплина' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string Дисциплина
        {
            get
            {
                return this._дисциплина;
            }
            set
            {
                if ((this._дисциплина != value))
                {
                    this.OnДисциплинаChanging(value);
                    this.RaiseDataMemberChanging("Дисциплина");
                    this.ValidateProperty("Дисциплина", value);
                    this._дисциплина = value;
                    this.RaiseDataMemberChanged("Дисциплина");
                    this.OnДисциплинаChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодГруппы' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Nullable<int> КодГруппы
        {
            get
            {
                return this._кодГруппы;
            }
            set
            {
                if ((this._кодГруппы != value))
                {
                    this.OnКодГруппыChanging(value);
                    this.RaiseDataMemberChanging("КодГруппы");
                    this.ValidateProperty("КодГруппы", value);
                    this._кодГруппы = value;
                    this.RaiseDataMemberChanged("КодГруппы");
                    this.OnКодГруппыChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодДисциплины' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int КодДисциплины
        {
            get
            {
                return this._кодДисциплины;
            }
            set
            {
                if ((this._кодДисциплины != value))
                {
                    this.OnКодДисциплиныChanging(value);
                    this.ValidateProperty("КодДисциплины", value);
                    this._кодДисциплины = value;
                    this.RaisePropertyChanged("КодДисциплины");
                    this.OnКодДисциплиныChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодСтудента' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int КодСтудента
        {
            get
            {
                return this._кодСтудента;
            }
            set
            {
                if ((this._кодСтудента != value))
                {
                    this.OnКодСтудентаChanging(value);
                    this.ValidateProperty("КодСтудента", value);
                    this._кодСтудента = value;
                    this.RaisePropertyChanged("КодСтудента");
                    this.OnКодСтудентаChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Оценка' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Оценка
        {
            get
            {
                return this._оценка;
            }
            set
            {
                if ((this._оценка != value))
                {
                    this.OnОценкаChanging(value);
                    this.ValidateProperty("Оценка", value);
                    this._оценка = value;
                    this.RaisePropertyChanged("Оценка");
                    this.OnОценкаChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ФИО' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ФИО
        {
            get
            {
                return this._фио;
            }
            set
            {
                if ((this._фио != value))
                {
                    this.OnФИОChanging(value);
                    this.RaiseDataMemberChanging("ФИО");
                    this.ValidateProperty("ФИО", value);
                    this._фио = value;
                    this.RaiseDataMemberChanged("ФИО");
                    this.OnФИОChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._кодДисциплины, this._кодСтудента, this._оценка);
        }
    }
    
    /// <summary>
    /// The 'Студент' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class Студент : Entity
    {
        
        private EntityRef<Группа> _группа;
        
        private int _код;
        
        private Nullable<int> _кодГруппы;
        
        private EntityCollection<Оценка> _оценка;
        
        private string _фио;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnКодChanging(int value);
        partial void OnКодChanged();
        partial void OnКодГруппыChanging(Nullable<int> value);
        partial void OnКодГруппыChanged();
        partial void OnФИОChanging(string value);
        partial void OnФИОChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Студент"/> class.
        /// </summary>
        public Студент()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Группа"/> entity.
        /// </summary>
        [Association("Группа_Студент", "КодГруппы", "Код", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Группа Группа
        {
            get
            {
                if ((this._группа == null))
                {
                    this._группа = new EntityRef<Группа>(this, "Группа", this.FilterГруппа);
                }
                return this._группа.Entity;
            }
            set
            {
                Группа previous = this.Группа;
                if ((previous != value))
                {
                    this.ValidateProperty("Группа", value);
                    if ((previous != null))
                    {
                        this._группа.Entity = null;
                        previous.Студент.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.КодГруппы = value.Код;
                    }
                    else
                    {
                        this.КодГруппы = default(Nullable<int>);
                    }
                    this._группа.Entity = value;
                    if ((value != null))
                    {
                        value.Студент.Add(this);
                    }
                    this.RaisePropertyChanged("Группа");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Код' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Код
        {
            get
            {
                return this._код;
            }
            set
            {
                if ((this._код != value))
                {
                    this.OnКодChanging(value);
                    this.ValidateProperty("Код", value);
                    this._код = value;
                    this.RaisePropertyChanged("Код");
                    this.OnКодChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодГруппы' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Группа")]
        [RoundtripOriginal()]
        public Nullable<int> КодГруппы
        {
            get
            {
                return this._кодГруппы;
            }
            set
            {
                if ((this._кодГруппы != value))
                {
                    this.OnКодГруппыChanging(value);
                    this.RaiseDataMemberChanging("КодГруппы");
                    this.ValidateProperty("КодГруппы", value);
                    this._кодГруппы = value;
                    this.RaiseDataMemberChanged("КодГруппы");
                    this.OnКодГруппыChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Оценка"/> entities.
        /// </summary>
        [Association("Студент_Оценка", "Код", "КодСтудента")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<Оценка> Оценка
        {
            get
            {
                if ((this._оценка == null))
                {
                    this._оценка = new EntityCollection<Оценка>(this, "Оценка", this.FilterОценка, this.AttachОценка, this.DetachОценка);
                }
                return this._оценка;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ФИО' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ФИО
        {
            get
            {
                return this._фио;
            }
            set
            {
                if ((this._фио != value))
                {
                    this.OnФИОChanging(value);
                    this.RaiseDataMemberChanging("ФИО");
                    this.ValidateProperty("ФИО", value);
                    this._фио = value;
                    this.RaiseDataMemberChanged("ФИО");
                    this.OnФИОChanged();
                }
            }
        }
        
        private bool FilterГруппа(Группа entity)
        {
            return (entity.Код == this.КодГруппы);
        }
        
        private void AttachОценка(Оценка entity)
        {
            entity.Студент = this;
        }
        
        private void DetachОценка(Оценка entity)
        {
            entity.Студент = null;
        }
        
        private bool FilterОценка(Оценка entity)
        {
            return (entity.КодСтудента == this.Код);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._код;
        }
    }
    
    /// <summary>
    /// The 'СтудентГруппа' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/StudBusApp.Web")]
    public sealed partial class СтудентГруппа : Entity
    {
        
        private int _код;
        
        private Nullable<int> _кодГруппы;
        
        private string _наименование;
        
        private string _фио;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnКодChanging(int value);
        partial void OnКодChanged();
        partial void OnКодГруппыChanging(Nullable<int> value);
        partial void OnКодГруппыChanged();
        partial void OnНаименованиеChanging(string value);
        partial void OnНаименованиеChanged();
        partial void OnФИОChanging(string value);
        partial void OnФИОChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="СтудентГруппа"/> class.
        /// </summary>
        public СтудентГруппа()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Код' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Код
        {
            get
            {
                return this._код;
            }
            set
            {
                if ((this._код != value))
                {
                    this.OnКодChanging(value);
                    this.ValidateProperty("Код", value);
                    this._код = value;
                    this.RaisePropertyChanged("Код");
                    this.OnКодChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'КодГруппы' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> КодГруппы
        {
            get
            {
                return this._кодГруппы;
            }
            set
            {
                if ((this._кодГруппы != value))
                {
                    this.OnКодГруппыChanging(value);
                    this.RaiseDataMemberChanging("КодГруппы");
                    this.ValidateProperty("КодГруппы", value);
                    this._кодГруппы = value;
                    this.RaiseDataMemberChanged("КодГруппы");
                    this.OnКодГруппыChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Наименование' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Наименование
        {
            get
            {
                return this._наименование;
            }
            set
            {
                if ((this._наименование != value))
                {
                    this.OnНаименованиеChanging(value);
                    this.RaiseDataMemberChanging("Наименование");
                    this.ValidateProperty("Наименование", value);
                    this._наименование = value;
                    this.RaiseDataMemberChanged("Наименование");
                    this.OnНаименованиеChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ФИО' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ФИО
        {
            get
            {
                return this._фио;
            }
            set
            {
                if ((this._фио != value))
                {
                    this.OnФИОChanging(value);
                    this.RaiseDataMemberChanging("ФИО");
                    this.ValidateProperty("ФИО", value);
                    this._фио = value;
                    this.RaiseDataMemberChanged("ФИО");
                    this.OnФИОChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._код;
        }
    }
}
